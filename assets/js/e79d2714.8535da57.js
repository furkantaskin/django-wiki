"use strict";(self.webpackChunkdjango_wiki=self.webpackChunkdjango_wiki||[]).push([[2648],{5162:(e,a,n)=>{n.d(a,{Z:()=>r});var i=n(7294),l=n(6010);const t="tabItem_Ymn6";function r(e){let{children:a,hidden:n,className:r}=e;return i.createElement("div",{role:"tabpanel",className:(0,l.Z)(t,r),hidden:n},a)}},5488:(e,a,n)=>{n.d(a,{Z:()=>k});var i=n(7462),l=n(7294),t=n(6010),r=n(2389),s=n(7392),o=n(7094),d=n(2466);const p="tabList__CuJ",u="tabItem_LNqP";function m(e){var a,n;const{lazy:r,block:m,defaultValue:k,values:c,groupId:y,className:b}=e,h=l.Children.map(e.children,(e=>{if((0,l.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),f=null!=c?c:h.map((e=>{let{props:{value:a,label:n,attributes:i}}=e;return{value:a,label:n,attributes:i}})),_=(0,s.l)(f,((e,a)=>e.value===a.value));if(_.length>0)throw new Error('Docusaurus error: Duplicate values "'+_.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.');const g=null===k?k:null!=(a=null!=k?k:null==(n=h.find((e=>e.props.default)))?void 0:n.props.value)?a:h[0].props.value;if(null!==g&&!f.some((e=>e.value===g)))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+g+'" but none of its children has the corresponding value. Available values are: '+f.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");const{tabGroupChoices:v,setTabGroupChoices:N}=(0,o.U)(),[T,z]=(0,l.useState)(g),x=[],{blockElementScrollPositionUntilNextRender:B}=(0,d.o5)();if(null!=y){const e=v[y];null!=e&&e!==T&&f.some((a=>a.value===e))&&z(e)}const C=e=>{const a=e.currentTarget,n=x.indexOf(a),i=f[n].value;i!==T&&(B(a),z(i),null!=y&&N(y,String(i)))},I=e=>{var a;let n=null;switch(e.key){case"ArrowRight":{var i;const a=x.indexOf(e.currentTarget)+1;n=null!=(i=x[a])?i:x[0];break}case"ArrowLeft":{var l;const a=x.indexOf(e.currentTarget)-1;n=null!=(l=x[a])?l:x[x.length-1];break}}null==(a=n)||a.focus()};return l.createElement("div",{className:(0,t.Z)("tabs-container",p)},l.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,t.Z)("tabs",{"tabs--block":m},b)},f.map((e=>{let{value:a,label:n,attributes:r}=e;return l.createElement("li",(0,i.Z)({role:"tab",tabIndex:T===a?0:-1,"aria-selected":T===a,key:a,ref:e=>x.push(e),onKeyDown:I,onFocus:C,onClick:C},r,{className:(0,t.Z)("tabs__item",u,null==r?void 0:r.className,{"tabs__item--active":T===a})}),null!=n?n:a)}))),r?(0,l.cloneElement)(h.filter((e=>e.props.value===T))[0],{className:"margin-top--md"}):l.createElement("div",{className:"margin-top--md"},h.map(((e,a)=>(0,l.cloneElement)(e,{key:a,hidden:e.props.value!==T})))))}function k(e){const a=(0,r.Z)();return l.createElement(m,(0,i.Z)({key:String(a)},e))}},1504:(e,a,n)=>{n.d(a,{Z:()=>t});var i=n(7294),l=n(7273);l.Z.initialize({startOnLoad:!0});const t=e=>{let{chart:a}=e;return(0,i.useEffect)((()=>{l.Z.contentLoaded()}),[]),i.createElement("div",{className:"mermaid"},a)}},7245:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>u,contentTitle:()=>d,default:()=>c,frontMatter:()=>o,metadata:()=>p,toc:()=>m});var i=n(7462),l=(n(7294),n(3905)),t=n(1504),r=n(5488),s=n(5162);const o={sidebar_position:4,custom_edit_url:null,description:"Python Inheritance kavram\u0131"},d="Inheritance",p={unversionedId:"django/patika/ileri-python/page4",id:"django/patika/ileri-python/page4",title:"Inheritance",description:"Python Inheritance kavram\u0131",source:"@site/docs/django/patika/ileri-python/page4.mdx",sourceDirName:"django/patika/ileri-python",slug:"/django/patika/ileri-python/page4",permalink:"/django-wiki/docs/django/patika/ileri-python/page4",draft:!1,editUrl:null,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,custom_edit_url:null,description:"Python Inheritance kavram\u0131"},sidebar:"tutorialSidebar",previous:{title:"Metodlar",permalink:"/django-wiki/docs/django/patika/ileri-python/page3"},next:{title:"Generator",permalink:"/django-wiki/docs/django/patika/ileri-python/page5"}},u={},m=[{value:"Dahili Fonksiyonlar",id:"dahili-fonksiyonlar",level:2},{value:"Magic Method",id:"magic-method",level:2},{value:"<strong>str</strong>() Metodu",id:"str-metodu",level:3},{value:"<strong>add</strong>() Metodu",id:"add-metodu",level:3},{value:"<strong>len</strong>():",id:"len",level:3}],k={toc:m};function c(e){let{components:a,...n}=e;return(0,l.kt)("wrapper",(0,i.Z)({},k,n,{components:a,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"inheritance"},"Inheritance"),(0,l.kt)("p",null,"Inheritance terimine ",(0,l.kt)("a",{parentName:"p",href:"/django-wiki/docs/django/patika/page2"},"\xf6nceden")," k\u0131saca de\u011finmi\u015ftik. \xd6zetlemek gerekirse \xfcst bir s\u0131n\u0131f veya s\u0131n\u0131flardan yeni bir s\u0131n\u0131f t\xfcretme olay\u0131n inheritance (kal\u0131t\u0131m) diyoruz. Burada t\xfcreten s\u0131n\u0131fa super/parent ve t\xfcretilen s\u0131n\u0131fa sub/child denilebilir."),(0,l.kt)("p",null,"Normalde inheritance kendi i\xe7erisinde \xe7ok say\u0131da \xe7e\u015fit i\xe7ermektedir. Genel olarak elimizde 6 farkl\u0131 kal\u0131t\u0131m t\xfcr\xfc bulunmaktad\u0131r.Bunlara"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Single Inheritance (Tekil kal\u0131t\u0131m)"),": Tek bir parent ve tek bir child \u015feklindedir. Yani B s\u0131n\u0131f direkt olarak A s\u0131n\u0131f\u0131ndan t\xfcretilmesidir"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Multi-level Inheritance(\xc7ok seviyeli kal\u0131t\u0131m)"),": Bir s\u0131n\u0131ftan t\xfcretilen bir s\u0131n\u0131f, ba\u015fka bir s\u0131n\u0131f\u0131 t\xfcretebilir. Yani A'dan t\xfcretilen B s\u0131n\u0131f\u0131ndan C s\u0131n\u0131f\u0131 da t\xfcretebiliriz."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Multiple Inheritance (\xc7o\u011ful kal\u0131t\u0131m)"),": Birden fazla parent kullanarak bir s\u0131n\u0131f t\xfcretebiliriz. \xd6rne\u011fin C s\u0131n\u0131f, \xf6zg\xfcn iki farkl\u0131 s\u0131n\u0131f olan A ve B s\u0131n\u0131flar\u0131ndan t\xfcretilebilir. Bunu t\u0131pk\u0131 bir aile gibi d\xfc\u015f\xfcnebiliriz."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Multipath Inheritance"),": Bir D s\u0131n\u0131f\u0131 d\xfc\u015f\xfcnelim. Bu D s\u0131n\u0131f\u0131 iki farkl\u0131 B ve C s\u0131n\u0131f\u0131ndan t\xfcretiliyor. Normalde bu \xe7o\u011ful kal\u0131t\u0131m gibi durabilir. Ama asl\u0131nda bu B ve C s\u0131n\u0131f\u0131 ise A s\u0131n\u0131f\u0131ndan t\xfcretilmi\u015ftir. \u0130\u015fte buna multipath inheritance diyoruz."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Hierarchical Inheritance"),": Asl\u0131nda soy a\u011fac\u0131na \xe7ok benzer. Ya da d\xfc\u011f\xfcm a\u011fac\u0131 gibi g\xf6r\xfcnebilir. Detayl\u0131 \xf6rne\u011fi \u015fekilden g\xf6rebiliriz."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Hybrid Inheritance"),": Soy a\u011fac\u0131n\u0131n ta kendisidir. ")),(0,l.kt)(r.Z,{mdxType:"Tabs"},(0,l.kt)(s.Z,{value:"single",label:"Single",mdxType:"TabItem"},(0,l.kt)(t.Z,{chart:"\n  flowchart TB;\n  A--\x3eB;\n",mdxType:"Mermaid"})),(0,l.kt)(s.Z,{value:"multi-level",label:"Multi-Level",mdxType:"TabItem"},(0,l.kt)(t.Z,{chart:"\n  flowchart TB;\n  A1[A]--\x3eB1[B]--\x3eC1[C];\n",mdxType:"Mermaid"})),(0,l.kt)(s.Z,{value:"multiple",label:"Multiple",mdxType:"TabItem"},(0,l.kt)(t.Z,{chart:"\n  flowchart TB;\n  A2[A] & B2[B] --\x3e C2[C];\n",mdxType:"Mermaid"})),(0,l.kt)(s.Z,{value:"multipath",label:"Multipath",mdxType:"TabItem"},(0,l.kt)(t.Z,{chart:"\n  flowchart TB;\n  A3[A]--\x3e B3[B] & C3[C] --\x3e D3[D]; \n",mdxType:"Mermaid"})),(0,l.kt)(s.Z,{value:"hierarchical",label:"Hierarchical",mdxType:"TabItem"},(0,l.kt)(t.Z,{chart:"\n  flowchart TB;\n  A4[A]--\x3e B4[B] & C4[C];\n  B4[B]--\x3e D4[D] & E4[E];\n  C4[C]--\x3e F4[F] & G4[G];\n",mdxType:"Mermaid"})),(0,l.kt)(s.Z,{value:"hybrid",label:"Hybrid",mdxType:"TabItem"},(0,l.kt)(t.Z,{chart:"\n  flowchart TB;\n  A5[A] & F5[F]--\x3eB5[B]\n  A5[A]--\x3eC5[C];\n  C5[C]--\x3eD5[D] & E5[E];\n",mdxType:"Mermaid"}))),(0,l.kt)("p",null,"\xd6rne\u011fin \xe7al\u0131\u015fanlar\u0131m\u0131z\u0131n oldu\u011funu biliyoruz ama bu \xe7al\u0131\u015fanlar\u0131n departmandan departmana farkl\u0131l\u0131klar\u0131 oldu\u011funu da hesaba katabiliriz. Mesela IT departman\u0131nda y\u0131ll\u0131k zam oran\u0131 %10 olabilir. Normalde biz bunu %5 olarak d\xfc\u015f\xfcnm\xfc\u015ft\xfck. "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},"class IT(Employee):\n  raise_percent = 1.1\n")),(0,l.kt)("p",null,"\u015eimdilik IT s\u0131n\u0131f\u0131m\u0131z\u0131 bo\u015f d\xfc\u015f\xfcnelim. Ve bir personel ekleyelim."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},'emp_new = IT("Yeni", "Personel", 30, 100)\n')),(0,l.kt)("p",null,"T\xfcretilen s\u0131n\u0131flar e\u011fer kendilerine \xf6zel \xf6zellikler (attribute) varsa \xf6nce ona bakar. Bulamazsa t\xfcretildi\u011fi s\u0131n\u0131f\u0131n \xf6zelliklerine bakacakt\u0131r. Yani biz isim, soyisim, ya\u015f ve maa\u015f\u0131 IT i\xe7inde tan\u0131mlamad\u0131\u011f\u0131m\u0131z i\xe7in Employee s\u0131n\u0131f\u0131ndakileri alacakt\u0131r. Ancak zam oran\u0131 olan ",(0,l.kt)("inlineCode",{parentName:"p"},"raise_percent")," de\u011ferini kendi s\u0131n\u0131f\u0131 i\xe7inde alacakt\u0131r. "),(0,l.kt)("p",null,"E\u011fer kendine has veri ekleyeceksek burada ufak bir ekleme yapabiliriz."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},'class IT(Employee):\n  def __init__(self, name, last, age, pay, lang):\n    # This line active\n    super().__init__(name, last, age, pay)\n    self.lang = lang\n\nit_emp = ("Foo", "Bar", 10, 4000, "python")\n')),(0,l.kt)("p",null,"Art\u0131k IT i\xe7indeki personellerde hangi dilde \xe7al\u0131\u015ft\u0131klar\u0131n\u0131 ekleyebiliriz. Buradaki ",(0,l.kt)("inlineCode",{parentName:"p"},"super().__init__")," ibaresi, parent s\u0131n\u0131f\u0131m\u0131zdaki (Employee) ",(0,l.kt)("inlineCode",{parentName:"p"},"__init__")," metodunu baz alacak ve o de\u011ferleri direkt olarak oradaki \u015fekilde ekleyerek gelecektir."),(0,l.kt)("p",null,"Normalde biz tekil kal\u0131t\u0131m yapt\u0131k. Bunu hiyerar\u015fik kal\u0131t\u0131ma \xe7evirebiliriz. \xd6rne\u011fin bir de \u0130K birimi ekleyelim."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},'class HR(Employee):\n  def __init__(self, name, last, age, pay, experience):\n    # This line active\n    super().__init__(name, last, age, pay)\n    self.experience = experience\n\nhr_emp = ("Foo", "Bar", 10, 4000, 5)\n')),(0,l.kt)("h2",{id:"dahili-fonksiyonlar"},"Dahili Fonksiyonlar"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"isinstance(instance, class)"),": Ekledi\u011fimiz verinin o s\u0131n\u0131fa ait olup olmad\u0131\u011f\u0131n\u0131 sorgular. \xd6rne\u011fin ",(0,l.kt)("inlineCode",{parentName:"li"},"isinstance(hr_emp, HR)")," fonksiyonu bize True d\xf6nerken HR de\u011ferini IT yapmam\u0131z durumunda False gelecektir."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"issubclass(class, class)"),": \u0130lk de\u011ferdeki s\u0131n\u0131f\u0131n ikinci s\u0131n\u0131f\u0131n alt\u0131 olup olmad\u0131\u011f\u0131na bakar. \xd6rne\u011fin ",(0,l.kt)("inlineCode",{parentName:"li"},"issubclass(HR, Employee)")," fonksiyonu bize True verirken Employee de\u011ferini IT yaparsak False gelecektir.")),(0,l.kt)("h2",{id:"magic-method"},"Magic Method"),(0,l.kt)("p",null,"Ayn\u0131 \u015fekilde magic methodlara veya dunder terimine ",(0,l.kt)("a",{parentName:"p",href:"/django-wiki/docs/django/patika/page2"},"\xf6nceden")," de\u011finmi\u015ftik."),(0,l.kt)("h3",{id:"str-metodu"},(0,l.kt)("strong",{parentName:"h3"},"str"),"() Metodu"),(0,l.kt)("p",null,"\xd6rne\u011fin biz personelimizi print etti\u011fimizde anlaml\u0131 bir \xe7\u0131kt\u0131 vermesini istiyoruz. \xc7\xfcnk\xfc normalde ",(0,l.kt)("inlineCode",{parentName:"p"},"print(hr_emp)")," dersek bize object bilgilerini verecektir. Bunu daha anlaml\u0131 yapmak i\xe7n \u015f\xf6yle bir yol izleriz."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},'class HR(Employee):\n  def __init__(self, name, last, age, pay, experience):\n    # This line active\n    super().__init__(name, last, age, pay)\n    self.experience = experience\n\n  def __str__(self):\n    print(f"{self.name} {self.last} personelinin {self.age} ya\u015f\u0131nda oldu\u011funu ve {self.pay} USD maa\u015f ald\u0131\u011f\u0131n\u0131 s\xf6yleyebiliriz. Ayr\u0131ca bu personelin {self.experinece} y\u0131ll\u0131k deneyimi var")\n\nhr_emp = ("Foo", "Bar", 10, 4000, 5)\nprint(hr_emp) \n# Foo Bar personelinin 10 ya\u015f\u0131nda oldu\u011funu ve 400 dolar maa\u015f ald\u0131\u011f\u0131n\u0131 s\xf6yleyebiliriz. Ayr\u0131ca bu personelin 5 y\u0131ll\u0131k deneyimi var.\n')),(0,l.kt)("h3",{id:"add-metodu"},(0,l.kt)("strong",{parentName:"h3"},"add"),"() Metodu"),(0,l.kt)("p",null,"Bir di\u011fer metod olarak ",(0,l.kt)("inlineCode",{parentName:"p"},"__add__")," metodunu kullanabiliriz."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},'class HR(Employee):\n  def __init__(self, name, last, age, pay, experience):\n    # This line active\n    super().__init__(name, last, age, pay)\n    self.experience = experience\n\n  def __str__(self):\n    print(f"{self.name} {self.last} personelinin {self.age} ya\u015f\u0131nda oldu\u011funu ve {self.pay} USD maa\u015f ald\u0131\u011f\u0131n\u0131 s\xf6yleyebiliriz. Ayr\u0131ca bu personelin {self.experinece} y\u0131ll\u0131k deneyimi var")\n  \n  def __add__(self,other):\n    return self.pay + other.pay\n\nhr_emp = ("Foo", "Bar", 10, 4000, 5)\nhr_emp2 = ("Selam", "Naber", 10, 200, 5)\nprint(hr_emp + hr_emp2) # 4200\n')),(0,l.kt)("p",null,"Buradaki ",(0,l.kt)("inlineCode",{parentName:"p"},"other")," terimi ba\u015fka bir instance ile i\u015flem yap\u0131laca\u011f\u0131 anlam\u0131na gelir. Nas\u0131l ki self bize o anki instance \xfczerinde bilgi veriyorsa other ise bunun tam tersini kast etmektedir."),(0,l.kt)("h3",{id:"len"},(0,l.kt)("strong",{parentName:"h3"},"len"),"():"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},'class HR(Employee):\n  def __init__(self, name, last, age, pay, experience):\n    # This line active\n    super().__init__(name, last, age, pay)\n    self.experience = experience\n\n  def __str__(self):\n    print(f"{self.name} {self.last} personelinin {self.age} ya\u015f\u0131nda oldu\u011funu ve {self.pay} USD maa\u015f ald\u0131\u011f\u0131n\u0131 s\xf6yleyebiliriz. Ayr\u0131ca bu personelin {self.experinece} y\u0131ll\u0131k deneyimi var")\n  \n  def __add__(self,other):\n    return self.pay + other.pay\n\n  def __len__(self):\n    return len(self.name)\n\nhr_emp = ("Foo", "Bar", 10, 4000, 5)\nhr_emp2 = ("Selam", "Naber", 10, 200, 5)\nprint(hr_emp + hr_emp2) # 4200\nlen(hr_emp) # 3\nlen(hr_emp2) # 5\n')))}c.isMDXComponent=!0}}]);