"use strict";(self.webpackChunkdjango_wiki=self.webpackChunkdjango_wiki||[]).push([[4984],{3905:(e,n,a)=>{a.d(n,{Zo:()=>s,kt:()=>m});var r=a(7294);function i(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function l(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,r)}return a}function t(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?l(Object(a),!0).forEach((function(n){i(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function o(e,n){if(null==e)return{};var a,r,i=function(e,n){if(null==e)return{};var a,r,i={},l=Object.keys(e);for(r=0;r<l.length;r++)a=l[r],n.indexOf(a)>=0||(i[a]=e[a]);return i}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)a=l[r],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var k=r.createContext({}),d=function(e){var n=r.useContext(k),a=n;return e&&(a="function"==typeof e?e(n):t(t({},n),e)),a},s=function(e){var n=d(e.components);return r.createElement(k.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var a=e.components,i=e.mdxType,l=e.originalType,k=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),p=d(a),m=i,y=p["".concat(k,".").concat(m)]||p[m]||u[m]||l;return a?r.createElement(y,t(t({ref:n},s),{},{components:a})):r.createElement(y,t({ref:n},s))}));function m(e,n){var a=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var l=a.length,t=new Array(l);t[0]=p;var o={};for(var k in n)hasOwnProperty.call(n,k)&&(o[k]=n[k]);o.originalType=e,o.mdxType="string"==typeof e?e:i,t[1]=o;for(var d=2;d<l;d++)t[d]=a[d];return r.createElement.apply(null,t)}return r.createElement.apply(null,a)}p.displayName="MDXCreateElement"},5356:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>k,contentTitle:()=>t,default:()=>u,frontMatter:()=>l,metadata:()=>o,toc:()=>d});var r=a(7462),i=(a(7294),a(3905));const l={sidebar_position:4,custom_edit_url:null,description:"\u0130leri Python kullan\u0131mlar\u0131"},t="\u0130leri Python Prensipleri",o={unversionedId:"django/patika/page4",id:"django/patika/page4",title:"\u0130leri Python Prensipleri",description:"\u0130leri Python kullan\u0131mlar\u0131",source:"@site/docs/django/patika/page4.mdx",sourceDirName:"django/patika",slug:"/django/patika/page4",permalink:"/django-wiki/docs/django/patika/page4",draft:!1,editUrl:null,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,custom_edit_url:null,description:"\u0130leri Python kullan\u0131mlar\u0131"},sidebar:"tutorialSidebar",previous:{title:"Nesne Y\xf6nelimli Programlama (OOP)",permalink:"/django-wiki/docs/django/patika/page3"}},k={},d=[{value:"*args ve **kwargs",id:"args-ve-kwargs",level:2},{value:"*args",id:"args",level:3},{value:"**kwargs",id:"kwargs",level:3},{value:"kwargs ve args Birlikte Kullanmak",id:"kwargs-ve-args-birlikte-kullanmak",level:3},{value:"Unpacking",id:"unpacking",level:3},{value:"Closure",id:"closure",level:2},{value:"Decorator",id:"decorator",level:2}],s={toc:d};function u(e){let{components:n,...a}=e;return(0,i.kt)("wrapper",(0,r.Z)({},s,a,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"i\u0307leri-python-prensipleri"},"\u0130leri Python Prensipleri"),(0,i.kt)("p",null,"Python ile biraz daha karma\u015f\u0131k konulara giri\u015f yap\u0131yoruz art\u0131k."),(0,i.kt)("h2",{id:"args-ve-kwargs"},"*args ve **kwargs"),(0,i.kt)("p",null,"args ve kwargs burada bir fonksiyona say\u0131s\u0131 belli olmayan de\u011fi\u015fkenleri g\xf6ndermeye yarar. Bizim fonksiyonumuz \xf6rnek olarak g\xf6nderilen t\xfcm elemanlar\u0131 toplayan bir fonksiyon olsun. Bunu biz genelde personal wallet uygulamalar\u0131nda g\xf6r\xfcr\xfcz. Biz ka\xe7 tane birim girersek girelim sonu\xe7 hep toplam olarak gelir. Normal \u015fartlarda biz fonksiyonlarda hep beliri say\u0131da arg\xfcman g\xf6ndermi\u015ftik. Ancak bu ki\u015fiden ki\u015fiye de\u011fi\u015fiklik g\xf6sterebilir. Bu durumda args ve kwargs k\u0131s\u0131mlar\u0131 devreye girer."),(0,i.kt)("h3",{id:"args"},"*args"),(0,i.kt)("p",null,"Args mant\u0131\u011f\u0131 yukar\u0131da bahsetti\u011fimiz gibi gelen belirsiz say\u0131da veriyi i\xe7eriye tuple olarak al\u0131p bunu kullanmay\u0131 sa\u011flar. Args i\xe7inde dictionary \xe7al\u0131\u015fmaz."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},"def sum(*args):\n    sum = 0\n    for i in args:\n        sum += i\n    return sum\n\n")),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"Burada illa args olarak bir \u015fey kullanaca\u011f\u0131z diye bir kaide yok. Bunu dilerseniz ",(0,i.kt)("inlineCode",{parentName:"p"},"vars")," ya da akl\u0131n\u0131za gelebilecek ba\u015fka bir \u015fey olarak da kullanabilirsiniz. Burada \xf6nemli olan \u015fey y\u0131ld\u0131z (",(0,i.kt)("em",{parentName:"p"}," - asterisk) ibaresidir. Buradaki ")," asl\u0131nda ",(0,i.kt)("a",{parentName:"p",href:"https://www.geeksforgeeks.org/packing-and-unpacking-arguments-in-python/"},"Variable Unpacking")," olarak ge\xe7mektedir. Yani bize gelen t\xfcm verileri teker teker a\xe7arak ilerlemektedir.")),(0,i.kt)("p",null,"Burada belirtmemiz gereken \u015fey ",(0,i.kt)("inlineCode",{parentName:"p"},"*args")," sadece list, tuple gibi keyword i\xe7ermeyen dizilerde \xe7al\u0131\u015f\u0131r. Dictionary i\xe7in ",(0,i.kt)("inlineCode",{parentName:"p"},"*args")," i\u015flem yapmayacakt\u0131r. Args bu k\u0131s\u0131mda gelen verileri tuple olarak al\u0131p i\u015flem yapar."),(0,i.kt)("h3",{id:"kwargs"},"**kwargs"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"**kwargs")," ise keyword value olay\u0131n\u0131 g\xfcderek arg\xfcman almay\u0131 sa\u011flar."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},'def students(**kwargs):\n    for v in kwargs.values():\n        print(v)\n\nstudents(name="Jake", student_number="401") \n\n"""\n\xc7\u0131kt\u0131s\u0131:\n\nJake\n401\n"""\n')),(0,i.kt)("p",null,"Unpack olmadan \xf6nceki halini de g\xf6rebiliriz bu k\u0131s\u0131mda"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},'def students(**students):\n    print(students)\n    for v in students:\n        print v\n\nstudents(name="Jake", student_number="401") \n\n"""\n\xc7\u0131kt\u0131s\u0131: \n\n{\'name\': \'Jake\', \'student_number\': \'401\'}\nname\nstudent_number\n"""\n')),(0,i.kt)("h3",{id:"kwargs-ve-args-birlikte-kullanmak"},"kwargs ve args Birlikte Kullanmak"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"*args")," ve ",(0,i.kt)("inlineCode",{parentName:"p"},"**kwargs")," olarak bir fonksiyonda beraber kullan\u0131labilir ancak burada s\u0131ras\u0131 \xf6nemlidir. ",(0,i.kt)("inlineCode",{parentName:"p"},"**kwargs")," burada bir keyword:value \u015feklinde \xe7al\u0131\u015ft\u0131\u011f\u0131 i\xe7in bunun fonksiyonda sona yaz\u0131lmas\u0131 gerekir. ",(0,i.kt)("inlineCode",{parentName:"p"},"**kwargs")," bir predefined argument olarak d\xfc\u015f\xfcn\xfcld\xfc\u011f\xfc i\xe7in Python bunun sonda olmas\u0131n\u0131 beklemektedir."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},'def weird(*args, **kwargs):\n    res = 0\n    for e in args:\n        res +=e\n    for k,v in args.items():\n        print(k, ":", v)\n\n    return res\n\nweird(1,2,3, name="Jake", student_number=401)\n"""\n\xc7\u0131kt\u0131s\u0131\n\nname: Jake\nstudent_number: 401\n\n6\n"""\n')),(0,i.kt)("h3",{id:"unpacking"},"Unpacking"),(0,i.kt)("p",null,"Unpacking olay\u0131n\u0131 yeniden hat\u0131rlayacak olursak basit bir deneme yapabiliriz. \xd6rne\u011fin bir liste verip bunu ",(0,i.kt)("inlineCode",{parentName:"p"},"print(*liste)")," \u015feklinde \xe7a\u011f\u0131r\u0131rsak \xe7\u0131kt\u0131s\u0131 bir liste de\u011fil s\u0131ral\u0131 elemanlar olacakt\u0131r. \xd6rne\u011fin:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},"liste = [1,2,3,4]\nprint(liste) # [1,2,3,4]\nprint(*liste) # 1 2 3 4\n")),(0,i.kt)("p",null,"Veya iki liste birle\u015ftirme yapmak istiyorsak "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},"list1 = [1,2,3,4]\nlist2 = [5,6,7]\nmerged = [list1, list2] # [[1,2,3,4], [5,6,7]]\nmerged_2 = [*list1, *list2] # [1,2,3,4,5,6,7]\n")),(0,i.kt)("p",null,"Dictionary i\xe7in de ",(0,i.kt)("inlineCode",{parentName:"p"},"**kwargs")," kullanabilirsiniz"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},'d1 = {"name": "Jake", "number": 402}\nd2 = {"last_name": "Helen", "grade": 40}\n\nd_merged = {**d1, **d2} # {"name", "Jake", "number": 402, "last_name": "Helen", "grade": 40}\n')),(0,i.kt)("admonition",{title:"D\u0130KKAT",type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"E\u011fer iki dictionary i\xe7inde ",(0,i.kt)("inlineCode",{parentName:"p"},"**kwargs")," ile birle\u015ftirme yaparsak buradaki keylerden birisinin ayn\u0131 olmas\u0131 durumunda ayn\u0131 olan key, son dictionary i\xe7indeki o keyin de\u011feri ile de\u011fi\u015ftirilecektir. \xd6rne\u011fin "),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-py"},'d1 = {"name": "Jake", "number": 402}\nd2 = {"name": "Helen", "grade": 40}\n\nd_merged ={**d1, **d2} # {"name", "Helen", "number": 402, "grade": 40}\n')),(0,i.kt)("p",{parentName:"admonition"},"G\xf6r\xfcld\xfc\u011f\xfc gibi ",(0,i.kt)("inlineCode",{parentName:"p"},'"name": "Jake"')," ifadesi art\u0131k yerini ",(0,i.kt)("inlineCode",{parentName:"p"},'"name":"Helen"')," ifadesine b\u0131rakt\u0131. \xc7\xfcnk\xfc son dictionary i\xe7indeki de\u011fer \xf6nceki dictionary i\xe7indeki de\u011feri de\u011fi\u015ftirdi.")),(0,i.kt)("p",null,"Stringler i\xe7in de unpacking yapabiliriz."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},"str_list = [*\"merhabalar listem\"]\nprint(str_list) # ['m', 'e', 'r', 'h', 'a', 'b', 'a', 'l', 'a', 'r', ' ', 'l', 'i', 's', 't', 'e', 'm']\n")),(0,i.kt)("h2",{id:"closure"},"Closure"),(0,i.kt)("p",null,"Fonksiyonlar sadece tek bir \u015fekilde olmaz. Dilersek bir ana fonksiyon i\xe7inde bir alt fonksiyon da \xe7a\u011f\u0131rabiliriz. Normalde fonksiyonlar\u0131n i\xe7erisindeki de\u011fi\u015fkenler local scope olarak ge\xe7er. Yani o fonksiyon d\u0131\u015f\u0131ndaki ba\u015fka bir yerden o veriye direkt olarak eri\u015femeyiz. Ancak o fonksiyonu \xe7a\u011f\u0131rmam\u0131z veya de\u011fi\u015fkeni global yapmam\u0131z gerekir. Bu k\u0131s\u0131mda ise closure dedi\u011fimiz terim, alt fonksiyonun, onu kapsayan fonksiyonun de\u011fi\u015fkenlerine eri\u015febilmesine denir. \xd6rne\u011fin:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},'def outer():\n    msg = "Hello"\n\n    def inner(msg):\n        print(msg + "World")\n    return inner()\n\nouter() # "Hello World"\n')),(0,i.kt)("p",null,'Burada outer fonksiyonu \xe7a\u011f\u0131rd\u0131\u011f\u0131m\u0131zda return de\u011feri olarak inner fonksiyonundan gelen de\u011feri verecektir. inner fonksiyonu i\xe7inde bizim \xe7\u0131kt\u0131m\u0131z outer fonksiyonundan onu \xe7a\u011f\u0131ran yere gidece\u011fi i\xe7in \xe7\u0131kt\u0131m\u0131z "Hello World" olacakt\u0131r.'),(0,i.kt)("p",null,"Closure ile i\xe7 i\xe7e fonksiyon aras\u0131nda nas\u0131l bir fark var peki?"),(0,i.kt)("p",null,"Normalde fonksiyonlarda ve i\xe7 i\xe7e fonksiyonlarda olay biraz alt seviyelere iner. Elimizde \xf6rnek bir i\xe7 i\xe7e fonksiyon d\xfc\u015f\xfcnelim."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},"def say():\n    greeting = 'Hello'\n\n    def display():\n        print(greeting)\n\n    return display   \n")),(0,i.kt)("p",null,"Burada display fonksiyonu d\xf6ner ve normalde 'Hello' de\u011feri gelir. Peki fonksiyonu bir de\u011fi\u015fkene atarsak ne olur? "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},"fn = say()\nfn()\ndel say\n")),(0,i.kt)("p",null,"Normalde ",(0,i.kt)("inlineCode",{parentName:"p"},"fn=say()")," diyerek fonksiyonumuzu bir fn olarak tan\u0131mlad\u0131k. ",(0,i.kt)("inlineCode",{parentName:"p"},"del say")," dedi\u011fimizde fonksiyonumuzu sildik. Ancak biz yine gidip fn() ifadesini \xe7a\u011f\u0131r\u0131rsak kar\u015f\u0131m\u0131za Hello yaz\u0131s\u0131 \xe7\u0131kacakt\u0131r. Buradaki olay referans de\u011fil de\u011fer atama \u015feklindedir. Normalde dizilerde hat\u0131rlarsak bir diziyi tan\u0131mlad\u0131ktan sonra onu bir de\u011fi\u015fkene atarsak referans gibi \xe7al\u0131\u015f\u0131rd\u0131. \xd6rnek olarak"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},"a = [1,2,3]\nb = a\na.append(4)\nprint(b) # [1,2,3,4]\n")),(0,i.kt)("p",null,"\u015feklinde bir i\u015flemde b \xe7\u0131kt\u0131s\u0131 bize 1,2,3,4 de\u011ferlerini verir. \xc7\xfcnk\xfc a'n\u0131n de\u011ferini almaz, aksine onu referans g\xf6sterir. A'daki t\xfcm i\u015flemler b'yi de etkiler. Closure i\xe7inde de bunun bir de\u011fi\u015fi\u011fi olur. Normalde fonksiyon \xe7al\u0131\u015ft\u0131\u011f\u0131nda i\u015flemler yap\u0131l\u0131r ve fonksiyon tozlu rafa kald\u0131r\u0131l\u0131r. E\u011fer fonksiyonu silersek fn de gider, lakin bu sadece i\xe7 i\xe7e fonksiyonlar i\xe7in ge\xe7erlidir. Closure olay\u0131nda bu fonksiyon haf\u0131zada bir yere oturtulur ve fn bunu kaydeder. "),(0,i.kt)("h2",{id:"decorator"},"Decorator"),(0,i.kt)("p",null,"\xd6ncelikle Python'da fonksiyonlar\u0131 birazdaha tan\u0131yal\u0131m. Normalde fonksiyonlar\u0131 bir ",(0,i.kt)("a",{parentName:"p",href:"/django-wiki/docs/django/patika/page2#first-class"},"first-class")," olarak tan\u0131mlam\u0131\u015ft\u0131k. Peki bu ne demek oluyor? "),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Fonksiyon normalde bir nesnenin \xf6rne\u011fidir (instance)"),(0,i.kt)("li",{parentName:"ul"},"Bir fonksiyonu bir de\u011fi\u015fkende tutabiliriz"),(0,i.kt)("li",{parentName:"ul"},"Bir fonksiyonu ba\u015fka bir fonksiyona arg\xfcman olarak g\xf6nderebiliriz"),(0,i.kt)("li",{parentName:"ul"},"Bir fonksiyon i\xe7inde ba\u015fka bir fonksiyonu return edebiliriz"),(0,i.kt)("li",{parentName:"ul"},"Fonksiyonlar\u0131 hash table, liste veya ba\u015fka bir \u015fekilde bir veri yap\u0131s\u0131 i\xe7inde saklayabiliriz.")),(0,i.kt)("p",null,"\u015eimdi fonksiyonlar\u0131 az biraz tan\u0131yorsak buna g\xf6re i\u015flemleri b\xfcy\xfctebiliriz."),(0,i.kt)("p",null,"Decorator dedi\u011fimiz \u015fey bir fonksiyonun i\xe7indeki yap\u0131y\u0131 de\u011fi\u015ftirme gere\u011fi duymadan o fonksiyonun i\u015flevselli\u011fini de\u011fi\u015ftirmeyi sa\u011flar. "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},"def shout(text):\n    return text.upper()\n \nprint(shout('Hello'))\n \nyell = shout\n \nprint(yell('Hello'))\n")),(0,i.kt)("p",null,"\xd6rne\u011fin bu \u015fekilde bir tan\u0131mlamada yell ile shout ayn\u0131 g\xf6revi g\xf6r\xfcyor. Burada biz asl\u0131nda shout fonksiyonunu art\u0131k yell ile yeniden \xe7a\u011f\u0131rm\u0131yoruz. Aksine shout ile i\u015faret edilen fonksiyon nesnesine yell ile de g\xf6nderme yap\u0131yoruz. Bunu t\u0131pk\u0131 iki isim gibi d\xfc\u015f\xfcnebiliriz. Yani nas\u0131l iki farkl\u0131 ismi olan bir ki\u015fiye iki ismiyle de hitap edince bak\u0131yorsa buradaki olay da ayn\u0131 g\xf6revi g\xf6r\xfcyor. "),(0,i.kt)("p",null,"Basit\xe7e bir decorator kuracak olursak e\u011fer"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},'def print_func():\n    print("hey")\n\ndef decorator_func(func):\n    def wrapper_func():\n        return func()\n    return wrapper_func\n\ndecorated_print = decorator_func(print_func)\ndecorated_print() # hey\n')),(0,i.kt)("p",null,"Normalde ",(0,i.kt)("inlineCode",{parentName:"p"},"return wrapper_func")," k\u0131sm\u0131nda bir parantez eksik. \xc7\xfcnk\xfc parantez gelmesi durumunda fonksiyon \xe7al\u0131\u015facakt\u0131r. Biz asl\u0131nda fonksiyonu \xe7al\u0131\u015ft\u0131rm\u0131yoruz, o fonksiyona bir referansta bulunuyoruz. O metodu d\xf6nd\xfcr\xfcyoruz."),(0,i.kt)("p",null,"Normalde decorator olay\u0131ndaki ama\xe7, eldeki fonksiyona yeni bir i\u015flevsellik katmakt\u0131r. Biz \u015fu ana kadar bir i\u015flev katmad\u0131k. Biraz buna i\u015flev katabiliriz."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},'def print_func():\n    print("hey")\n\ndef decorator_func(func):\n    def wrapper_func():\n        print(f"Fonksiyonumuzun ismi art\u0131k {func.__name__} \u015feklindedir.")\n        return func()\n    return wrapper_func\ndecorated_print = decorator_func(print_func)\ndecorated_print() \n"""\n\xc7\u0131kt\u0131s\u0131: \n\nFonksiyonumuzun ismi art\u0131k print_func \u015feklindedir.\nhey\n"""\n')),(0,i.kt)("p",null,"Art\u0131k fonksiyonumuzu i\xe7eride bir farkl\u0131 duruma yerle\u015ftirdik. Normalde ba\u015fta ",(0,i.kt)("inlineCode",{parentName:"p"},"wrapper_func")," sadece ",(0,i.kt)("inlineCode",{parentName:"p"},"print_func")," fonksiyonunu \xe7al\u0131\u015ft\u0131r\u0131yordu. Art\u0131k hem o fonksiyonu \xe7al\u0131\u015ft\u0131ryor hem de fonksiyonumuza program i\xe7inde verdi\u011fimiz ismi (print_func olan k\u0131s\u0131m) ekrana yazd\u0131r\u0131yor. "),(0,i.kt)("p",null,"Bu yaz\u0131m\u0131 k\u0131saltmak i\xe7in at metodu (@) kullanabiliriz."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},'@decorator_func\ndef print_func():\n    print("hey")\n')),(0,i.kt)("p",null,"Bu ifade ile ",(0,i.kt)("inlineCode",{parentName:"p"},"decorated_print = decorator_func(print_func)")," ifadesi ayn\u0131 anlama gelmektedir. Yani diyoruz ki ",(0,i.kt)("inlineCode",{parentName:"p"},"decorator_func")," a biz ",(0,i.kt)("inlineCode",{parentName:"p"},"print_func")," fonksiyonumuzu g\xf6nderiyoruz."),(0,i.kt)("p",null,"Burada dikkat edilmesi gereken detay, burada \xe7a\u011f\u0131rd\u0131\u011f\u0131m\u0131z fonksiyon asl\u0131nda decorator i\xe7inde bulunan ",(0,i.kt)("inlineCode",{parentName:"p"},"wrapper_func")," olmas\u0131. \xd6rne\u011fin biz bu fonksiyonu arg\xfcmanlar\u0131 ile g\xf6nderirsek ne olacakt\u0131?"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},'def decorator_func(func):\n    # This will error\n    def wrapper_func():\n        print(f"Fonksiyonumuzun ismi art\u0131k {func.__name__} \u015feklindedir.")\n        return func(*args)\n    return wrapper_func\n\n@decorator_func\ndef func(name, age):\n    print(f"My friend {name} is {age} years old")\n\nfunc("Furkan", 26)\n')),(0,i.kt)("p",null,"Burada ",(0,i.kt)("inlineCode",{parentName:"p"},"wrapper_func")," fonksiyonunu asl\u0131nda \xe7a\u011f\u0131rd\u0131\u011f\u0131m\u0131z i\xe7in Python bize 0 arg\xfcman alan bir fonksiyona iki arg\xfcman g\xf6nderdi\u011fimizi s\xf6yleyecektir. \xc7\xfcnk\xfc biz asl\u0131nda ",(0,i.kt)("inlineCode",{parentName:"p"},"func")," yerine ",(0,i.kt)("inlineCode",{parentName:"p"},"wrapper_func")," fonksiyonunu \xe7a\u011f\u0131r\u0131yorduk. Ayn\u0131 \u015fekilde ona da bu arg\xfcmanlar\u0131 g\xf6ndermemiz gerekecektir. Yani o ast\u0131r\u0131 ",(0,i.kt)("inlineCode",{parentName:"p"},"wrapper_func")," yerine ",(0,i.kt)("inlineCode",{parentName:"p"},"wrapper_func(*args)")," olarak g\xfcncellememiz gerekiyor."),(0,i.kt)("p",null,"\xd6zetlemek gerekirse decorator kavram\u0131 bizim bir fonksiyonu input olarak al\u0131p bu fonksiyonun orijinalitesini bozmadan ona yeni i\u015flevsellikler katmam\u0131z sa\u011flayan yap\u0131lard\u0131r."),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"Decorator kavram\u0131n\u0131 daha iyi anlamak i\xe7in ",(0,i.kt)("a",{parentName:"p",href:"http://simeonfranklin.com/blog/2012/jul/1/python-decorators-in-12-steps/"},"bu adresi de ")," kullanabilirsiniz")))}u.isMDXComponent=!0}}]);