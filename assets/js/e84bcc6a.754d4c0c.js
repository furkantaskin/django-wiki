"use strict";(self.webpackChunkdjango_wiki=self.webpackChunkdjango_wiki||[]).push([[6253],{3905:(e,n,a)=>{a.d(n,{Zo:()=>d,kt:()=>u});var i=a(7294);function r(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function l(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,i)}return a}function t(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?l(Object(a),!0).forEach((function(n){r(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function s(e,n){if(null==e)return{};var a,i,r=function(e,n){if(null==e)return{};var a,i,r={},l=Object.keys(e);for(i=0;i<l.length;i++)a=l[i],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(i=0;i<l.length;i++)a=l[i],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=i.createContext({}),p=function(e){var n=i.useContext(o),a=n;return e&&(a="function"==typeof e?e(n):t(t({},n),e)),a},d=function(e){var n=p(e.components);return i.createElement(o.Provider,{value:n},e.children)},k={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},m=i.forwardRef((function(e,n){var a=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),m=p(a),u=r,y=m["".concat(o,".").concat(u)]||m[u]||k[u]||l;return a?i.createElement(y,t(t({ref:n},d),{},{components:a})):i.createElement(y,t({ref:n},d))}));function u(e,n){var a=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=a.length,t=new Array(l);t[0]=m;var s={};for(var o in n)hasOwnProperty.call(n,o)&&(s[o]=n[o]);s.originalType=e,s.mdxType="string"==typeof e?e:r,t[1]=s;for(var p=2;p<l;p++)t[p]=a[p];return i.createElement.apply(null,t)}return i.createElement.apply(null,a)}m.displayName="MDXCreateElement"},7734:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>o,contentTitle:()=>t,default:()=>k,frontMatter:()=>l,metadata:()=>s,toc:()=>p});var i=a(7462),r=(a(7294),a(3905));const l={sidebar_position:2,custom_edit_url:null,description:"Python'da OOP ve s\u0131n\u0131f yap\u0131s\u0131"},t="Python ve S\u0131n\u0131f yap\u0131s\u0131",s={unversionedId:"python/django/patika/ileri-python/page2",id:"python/django/patika/ileri-python/page2",title:"Python ve S\u0131n\u0131f yap\u0131s\u0131",description:"Python'da OOP ve s\u0131n\u0131f yap\u0131s\u0131",source:"@site/docs/python/django/patika/ileri-python/page2.mdx",sourceDirName:"python/django/patika/ileri-python",slug:"/python/django/patika/ileri-python/page2",permalink:"/django-wiki/docs/python/django/patika/ileri-python/page2",draft:!1,editUrl:null,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,custom_edit_url:null,description:"Python'da OOP ve s\u0131n\u0131f yap\u0131s\u0131"},sidebar:"tutorialSidebar",previous:{title:"\u0130leri Python Prensipleri",permalink:"/django-wiki/docs/python/django/patika/ileri-python/page1"},next:{title:"Metodlar",permalink:"/django-wiki/docs/python/django/patika/ileri-python/page3"}},o={},p=[{value:"S\u0131n\u0131f",id:"s\u0131n\u0131f",level:2},{value:"S\u0131n\u0131f De\u011fi\u015fkeni (Class Variable)",id:"s\u0131n\u0131f-de\u011fi\u015fkeni-class-variable",level:2}],d={toc:p};function k(e){let{components:n,...a}=e;return(0,r.kt)("wrapper",(0,i.Z)({},d,a,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"python-ve-s\u0131n\u0131f-yap\u0131s\u0131"},"Python ve S\u0131n\u0131f yap\u0131s\u0131"),(0,r.kt)("p",null,"Python da bir\xe7ok dil gibi OOP (Object-Oriented Programming / Nesne Y\xf6nelimli Programlama) destekleyen bir dildir. OOP presinpleri i\xe7in \u015fu anda notum haz\u0131r de\u011fil. Onu da haz\u0131rlad\u0131ktan sonra gerekli yerlere y\xf6nlendirece\u011fim."),(0,r.kt)("p",null,"Nesne Y\xf6nelimli Programlama'ya ufak da olsa ",(0,r.kt)("a",{parentName:"p",href:"/django-wiki/docs/python/django/patika/page3"},"\xf6nceden de\u011finmi\u015ftik.")," S\u0131ra bunu Python i\xe7inde g\xf6rmeye geldi."),(0,r.kt)("h2",{id:"s\u0131n\u0131f"},"S\u0131n\u0131f"),(0,r.kt)("p",null,"S\u0131n\u0131flar i\xe7indeki veriler ",(0,r.kt)("strong",{parentName:"p"},"attribute")," ve fonksiyonlar ",(0,r.kt)("strong",{parentName:"p"},"method")," olarak tan\u0131mlan\u0131r. \xd6rne\u011fin bir \u015firketi OOP mant\u0131\u011f\u0131 ile d\xfczenlersek personel i\xe7in bir s\u0131n\u0131f a\xe7abiliriz."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"class Employee:\n    pass\n")),(0,r.kt)("p",null,"Burada baz\u0131 terimleri bilmekte fayda var. Bunu ",(0,r.kt)("a",{parentName:"p",href:"https://www.tutorialspoint.com/oop-terminology-in-python"},"TutorialsPoint \xfczerinden")," detayl\u0131ca inceleyebiliriz. K\u0131saca \u015f\xf6yle bir not tutal\u0131m"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Class (S\u0131n\u0131f)"),": Nesneleri ve \xf6zelliklerini tan\u0131mlarken kullan\u0131r\u0131z. Bunu bir t\xfcr olarak d\xfc\u015f\xfcnebiliriz. Mesela Audi bir araba s\u0131n\u0131f\u0131na aittir veya Garfield bir kedi s\u0131n\u0131f\u0131na aittir."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Class Variable"),": S\u0131n\u0131f i\xe7indeki objelerin ortak olarak kulland\u0131\u011f\u0131 de\u011fi\u015fkenlerdir. Mesela kediler i\xe7in ayak say\u0131s\u0131 veya \xe7\u0131kard\u0131\u011f\u0131 ses gibi."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Data Member"),": S\u0131n\u0131f veya nesneleri ile alakal\u0131 verileri tutan s\u0131n\u0131f veya instance de\u011fi\u015fkenidir."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function Overloading"),": Belirli bir fonksiyona birden fazla i\u015flev katma eylemidir. \xd6rne\u011fin sum fonksiyonu hem a ile b'yi toplayabilir hem de a,b,c'yi toplayabilir. \xd6rne\u011fin")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"class Deneme:\n    def sum(self,a,b):\n        return a+b\n    def sum(self,a,b,c):\n        return a+b+c\n")),(0,r.kt)("p",null,"Bu \u015fekilde ayn\u0131 fonksiyona birden fazla i\u015flev atad\u0131k."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Instance Variable"),": S\u0131n\u0131f i\xe7inde tan\u0131mlanan instance'ta sadece o instance'a ait olan de\u011fi\u015fkenlerdir. Yani arada farkl\u0131 bir duruma sahip instance varsa o instance'\u0131 di\u011ferlerinden ay\u0131racak de\u011fi\u015fkendir. \xd6rne\u011fin her ne kadar kedilerin hepsi renkli olsa da bu kediden kediye de\u011fi\u015fir. \u0130\u015fte bu de\u011fi\u015fikli\u011fe biz instance variable diyoruz."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Inheritance"),": Kal\u0131t\u0131m olarak da ge\xe7en Inheritance asl\u0131nda bizim biyolojideki terimimizin ayn\u0131s\u0131d\u0131r. Bir s\u0131n\u0131f\u0131n ba\u015fka bir s\u0131n\u0131ftan veya s\u0131n\u0131flardan t\xfcretilmesidir. Bunu anne baba \xe7ocuk gibi d\xfc\u015f\xfcnebiliriz. Elimizde A ve B s\u0131n\u0131flar\u0131 olsun. Buradaki B s\u0131n\u0131f\u0131n\u0131n A s\u0131n\u0131f\u0131ndan alaca\u011f\u0131 temel \xf6zellikler varsa bunlar\u0131 al\u0131p \xfcst\xfcne oynama yapabiliriz. Mesela kediler ve k\xf6pekler hayvanlar aleminde yak\u0131n \xf6zelliklere sahiptir. Bunlar\u0131 birer inhteritance ile hayvanlar s\u0131n\u0131f\u0131ndan \xe7ekebiliriz.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"class Animals:\n    def __init__(self, paws,color,tail):\n        self.paws = paws\n        self.color = color\n        self.tail = tail\n\nclass Cat(Animals):\n    pass\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Instance"),": Her s\u0131n\u0131f\u0131n birer birey \xf6zelli\u011fidir. Yani buradaki kedinin pati say\u0131s\u0131, rengi ve kuyru\u011fu birer instance olarak i\u015f g\xf6r\xfcr."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Instantiation"),": Instance olu\u015fturma i\u015flemidir."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Method"),": S\u0131n\u0131f i\xe7indeki fonksiyonlara method deriz."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Object"),": S\u0131n\u0131f\u0131 taraf\u0131ndan tan\u0131mlanan \xf6zel veri yap\u0131s\u0131d\u0131r. \xd6rne\u011fin ",(0,r.kt)("inlineCode",{parentName:"li"},"Cat")," s\u0131n\u0131f\u0131na biz Garfield'\u0131 ekledi\u011fimizde Garfield art\u0131k bir object olacakt\u0131r.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},'garfield = Cat(4, "orange", "long")\n')),(0,r.kt)("p",null,"\xd6rnek bir class ve object olu\u015ftural\u0131m."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},'class Employee:\n    def __init__(self, name, last, age, pay):\n        self.name = name\n        self.last = last\n        self.age = age\n        self.pay = pay\n    \nemp_1 = Employee("Furkan", "Ta\u015fk\u0131n", 26, 100)\nprint(emp_1.name) # Furkan\nprint(emp_1.age) # 26\n')),(0,r.kt)("p",null,"Buradaki ",(0,r.kt)("inlineCode",{parentName:"p"},"def __init__")," magic method veya dunder olarak ge\xe7er. Biz \"Furkan\" isimli nesne olu\u015fturdu\u011fumuz zaman ilgili s\u0131n\u0131fa gider ve ba\u015fta gelebilecek bilgileri kendisi belirler. Yani Furkan'\u0131n ismi, soyismi, ya\u015f\u0131 ve maa\u015f\u0131 olaca\u011f\u0131n\u0131 anlar. Furkan'\u0131n soyad\u0131n\u0131 \xe7ektiren \u015fey ise, yani ",(0,r.kt)("inlineCode",{parentName:"p"},"print(furkan.last)"),' dedi\u011fimizde "Ta\u015fk\u0131n" ibaresini d\xf6nd\xfcren \u015fey ',(0,r.kt)("inlineCode",{parentName:"p"},"self")," olmaktad\u0131r. Self asl\u0131nda o nesnenin veya instance'\u0131n kendisine seslenece\u011fini belirtmektedir. Yani o nesnenin kendi bilgilerini getirmemiz gerekti\u011fini s\xf6yler. Detayl\u0131 bilgi i\xe7in ",(0,r.kt)("a",{parentName:"p",href:"https://www.tutorialsteacher.com/python/magic-methods-in-python#:~:text=Python%20%2D%20Magic%20or%20Dunder%20Methods,class%20on%20a%20certain%20action."},"t\u0131klay\u0131n\u0131z.")),(0,r.kt)("p",null,"\xd6rne\u011fin s\u0131n\u0131f i\xe7indeki bir fonksiyonla bu \xe7al\u0131\u015fan\u0131n bilgilerini ekrana bast\u0131rabiliriz:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},'class Employee:\n    def __init__(self, name, last, age, pay):\n        self.name = name\n        self.last = last\n        self.age = age\n        self.pay = pay\n    def fullname(self):\n        print(f"My name is {self.name} and surname is {self.last}")\n\nemp_1 = Employee("Furkan", "Ta\u015fk\u0131n", 26, 100)\nemp_1.fullname() # My name is Furkan and surname is Ta\u015fk\u0131n\n')),(0,r.kt)("p",null,"Asl\u0131nda fark ettiysek bizim fonksiyona bir arg\xfcman g\xf6ndermedik ama fonksiyon bizim Furkan Ta\u015fk\u0131n'a bakaca\u011f\u0131m\u0131z\u0131 anlad\u0131. \u0130\u015fte bunu sa\u011flayan \u015fey ",(0,r.kt)("inlineCode",{parentName:"p"},"self")," ibaresidir. O an bakt\u0131\u011f\u0131m\u0131z instance ne ise onunla ilgilendi\u011fimizi ve verilerin ondan gelece\u011fini s\xf6ylemektedir. E\u011fer Python i\xe7inde bir metoda siz self eklemezseniz, Python o metodu \xe7a\u011f\u0131r\u0131rken kendisi ekleyecektir ve arg\xfcman almayan bir fonksiyona arg\xfcman g\xf6nderdi\u011fimizi d\xfc\u015f\xfcnerek hata verecektir."),(0,r.kt)("h2",{id:"s\u0131n\u0131f-de\u011fi\u015fkeni-class-variable"},"S\u0131n\u0131f De\u011fi\u015fkeni (Class Variable)"),(0,r.kt)("p",null,"Instance variable \xfczerine de\u011finmi\u015ftik. Kedilerin renkleri ortak olsa da bu renkler kendi i\xe7inde ayr\u0131l\u0131r. Yani t\xfcm kediler renkli olabilir ama bu renkler turuncu, tekir, siyah, beyaz, gri \u015feklinde de\u011fi\u015febilir. Kedinin karakteristikleri olan bu renklere biz instance variable diyoruz. "),(0,r.kt)("p",null,"Peki kediler i\xe7inde ortak olan pati say\u0131s\u0131, kuyruk uzunlu\u011fu, sesi gibi ortak \xf6zellikleri her kedi i\xe7in tan\u0131mlamak gerekiyor mu? Tabii ki hay\u0131r. \u0130\u015fte bunun i\xe7in class variable kullan\u0131yoruz. Mesela bir kedinin sesi miyav olarak \xe7\u0131k\u0131yorsa ve 4 patisi varsa bunlar\u0131 biz class variable olarak s\u0131n\u0131f i\xe7inde tan\u0131mlayabiliriz."),(0,r.kt)("p",null,"Elimizdeki \xf6rne\u011fe g\xf6re d\xfc\u015f\xfcnecek olursa t\xfcm personellerimizin kendi i\xe7inde farkl\u0131l\u0131\u011f\u0131 olsa da (isim, soyisim, ya\u015f, maa\u015f) zam oranlar\u0131n\u0131n ayn\u0131 oldu\u011funu d\xfc\u015f\xfcnelim. "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"class Employee():\n    raise_percent = 1.05\n    \n    def __init__(self, name, last, age, pay):\n        self.name = name\n        self.last = last\n        self.age = age\n        self.pay = pay\n    \n    def apply_raise(self):\n        self.pay = self.pay * Employee.raise_percent\n")),(0,r.kt)("p",null,"Burada ",(0,r.kt)("inlineCode",{parentName:"p"},"raise_percent")," de\u011feri s\u0131n\u0131fa ait oldu\u011fu i\xe7in t\u0131pk\u0131 instance i\xe7in yapt\u0131\u011f\u0131m\u0131z ",(0,r.kt)("inlineCode",{parentName:"p"},"self")," gibi s\u0131n\u0131f de\u011fi\u015fkenlerine de s\u0131n\u0131f\u0131n ad\u0131n\u0131 yazarak o veriyi \xe7a\u011f\u0131rabiliyoruz."),(0,r.kt)("p",null,"Olu\u015fturdu\u011fumuz instance'\u0131n verilerini g\xf6rmek i\xe7in \xf6zel bir dahili metod kullanabiliriz. ",(0,r.kt)("inlineCode",{parentName:"p"},"print(emp_1.__dict__)")," \u015feklinde bir tan\u0131mla bizim olu\u015fturdu\u011fumuz personel isim, soyisim, ya\u015f ve maa\u015f gibi bilgilerine eri\u015febiliriz. Bu bilgileri bize dictionary format\u0131nda verecektir."),(0,r.kt)("p",null,"Class variable'lar dilersek g\xfcncellenebilir. Bunu ilgili s\u0131n\u0131f\u0131n ad\u0131 ile yapabiliriz. \xd6rne\u011fin zam oran\u0131 de\u011fi\u015ftiyse bunu \u015fu \u015fekilde g\xfcncelleriz"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"Employee.raise_percent = 1.06\n")),(0,r.kt)("p",null,"Art\u0131k bu fonksiyonu t\xfcm personellerimiz i\xe7in \xe7al\u0131\u015ft\u0131rd\u0131\u011f\u0131m\u0131z zaman zam oran\u0131 %5 yerine %6 olarak d\xfc\u015f\xfcn\xfclerek \xe7al\u0131\u015facakt\u0131r."),(0,r.kt)("p",null,"Biz bu verileri tutuyoruz ancak elimizdeki Employee, yani \xe7al\u0131\u015fan say\u0131s\u0131n\u0131 da kontrol etmek istiyoruz. O zaman burada basit bir ekleme yapmam\u0131z yeterli olacakt\u0131r."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"class Employee():\n    raise_percent = 1.05\n    # This line active\n    num_emp = 0\n    \n    def __init__(self, name, last, age, pay):\n        self.name = name\n        self.last = last\n        self.age = age\n        self.pay = pay\n        # This line active\n        Employee.num_emp += 1\n    \n    def apply_raise(self):\n        self.pay = self.pay * Employee.raise_percent\n")),(0,r.kt)("p",null,"Art\u0131k her personel olu\u015fturu\u015fumuzda s\u0131n\u0131f\u0131n i\xe7indeki ",(0,r.kt)("inlineCode",{parentName:"p"},"num_emp")," de\u011feri artacakt\u0131r. Yani 10 personel olu\u015fturduysak bu say\u0131 en son 10 olackt\u0131r."))}k.isMDXComponent=!0}}]);