"use strict";(self.webpackChunkdjango_wiki=self.webpackChunkdjango_wiki||[]).push([[8334],{3905:(e,n,i)=>{i.d(n,{Zo:()=>s,kt:()=>m});var a=i(7294);function r(e,n,i){return n in e?Object.defineProperty(e,n,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[n]=i,e}function l(e,n){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),i.push.apply(i,a)}return i}function t(e){for(var n=1;n<arguments.length;n++){var i=null!=arguments[n]?arguments[n]:{};n%2?l(Object(i),!0).forEach((function(n){r(e,n,i[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):l(Object(i)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(i,n))}))}return e}function d(e,n){if(null==e)return{};var i,a,r=function(e,n){if(null==e)return{};var i,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)i=l[a],n.indexOf(i)>=0||(r[i]=e[i]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)i=l[a],n.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(r[i]=e[i])}return r}var k=a.createContext({}),o=function(e){var n=a.useContext(k),i=n;return e&&(i="function"==typeof e?e(n):t(t({},n),e)),i},s=function(e){var n=o(e.components);return a.createElement(k.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var i=e.components,r=e.mdxType,l=e.originalType,k=e.parentName,s=d(e,["components","mdxType","originalType","parentName"]),u=o(i),m=r,c=u["".concat(k,".").concat(m)]||u[m]||p[m]||l;return i?a.createElement(c,t(t({ref:n},s),{},{components:i})):a.createElement(c,t({ref:n},s))}));function m(e,n){var i=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=i.length,t=new Array(l);t[0]=u;var d={};for(var k in n)hasOwnProperty.call(n,k)&&(d[k]=n[k]);d.originalType=e,d.mdxType="string"==typeof e?e:r,t[1]=d;for(var o=2;o<l;o++)t[o]=i[o];return a.createElement.apply(null,t)}return a.createElement.apply(null,i)}u.displayName="MDXCreateElement"},9615:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>k,contentTitle:()=>t,default:()=>p,frontMatter:()=>l,metadata:()=>d,toc:()=>o});var a=i(7462),r=(i(7294),i(3905));const l={sidebar_position:2,custom_edit_url:null,description:"Python'a dair k\u0131sa notlar"},t="Python Notlar\u0131",d={unversionedId:"python/django/patika/page2",id:"python/django/patika/page2",title:"Python Notlar\u0131",description:"Python'a dair k\u0131sa notlar",source:"@site/docs/python/django/patika/page2.mdx",sourceDirName:"python/django/patika",slug:"/python/django/patika/page2",permalink:"/django-wiki/docs/python/django/patika/page2",draft:!1,editUrl:null,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,custom_edit_url:null,description:"Python'a dair k\u0131sa notlar"},sidebar:"tutorialSidebar",previous:{title:"\u0130leri Seviye Git",permalink:"/django-wiki/docs/python/django/patika/page1"},next:{title:"Nesne Y\xf6nelimli Programlama (OOP)",permalink:"/django-wiki/docs/python/django/patika/page3"}},k={},o=[{value:"Temel Bilgiler",id:"temel-bilgiler",level:2},{value:"Short-Circuit",id:"short-circuit",level:2},{value:"Ternary",id:"ternary",level:2},{value:"Listeler",id:"listeler",level:2},{value:"List",id:"list",level:3},{value:"Tuple",id:"tuple",level:3},{value:"Dictionary",id:"dictionary",level:3},{value:"Set",id:"set",level:3},{value:"List Comprehension",id:"list-comprehension",level:3},{value:"Variable Unpacking",id:"variable-unpacking",level:3},{value:"Enumerate",id:"enumerate",level:3},{value:"Zip",id:"zip",level:3},{value:"Fonksiyonlar",id:"fonksiyonlar",level:2},{value:"Predefined",id:"predefined",level:3},{value:"First-Class",id:"first-class",level:3}],s={toc:o};function p(e){let{components:n,...i}=e;return(0,r.kt)("wrapper",(0,a.Z)({},s,i,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"python-notlar\u0131"},"Python Notlar\u0131"),(0,r.kt)("p",null,"Burada detayl\u0131 bir bilgi bulunmamaktad\u0131r. Kendime g\xf6re notlar tutmaktay\u0131m."),(0,r.kt)("h2",{id:"temel-bilgiler"},"Temel Bilgiler"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Temel veri tipleri integer, float, string, boolean'd\u0131r. ",(0,r.kt)("inlineCode",{parentName:"li"},"type(variable)")," ile tipini g\xf6rebiliriz."),(0,r.kt)("li",{parentName:"ul"},"Temel operat\xf6rler ' + - * ** / // % ' \u015feklindedir. Bu operat\xf6rler s\u0131ras\u0131yla toplama, \xe7\u0131karma, \xe7arpma, \xfcs alma, b\xf6lme, kalanl\u0131 b\xf6l\xfcmdeki b\xf6l\xfcm sonucunu verme ve kalan bulma \u015feklindedir. B\xf6l\xfcm her zaman float d\xf6ner."),(0,r.kt)("li",{parentName:"ul"},"Float bir ifade int forma d\xf6n\xfc\u015ft\xfcr\xfcl\xfcrse yuvarlama yap\u0131lmaz, sadece ondal\u0131kl\u0131 k\u0131s\u0131m silinir. Yani ",(0,r.kt)("inlineCode",{parentName:"li"},"int(4.9)")," i\xe7in \xe7\u0131kt\u0131 5 olmaz 4 olur."),(0,r.kt)("li",{parentName:"ul"},"Stringlerde slicing yaparken biti\u015f de\u011feri son de\u011ferden b\xfcy\xfckse hata olmaz, sadece indexing k\u0131sm\u0131nda hata verir."),(0,r.kt)("li",{parentName:"ul"},"Python i\xe7inde throwaway variable olarak adland\u0131r\u0131lan '",(0,r.kt)("em",{parentName:"li"},"' (alt \xe7izgi) \u015feklinde de\u011fi\u015fkenler de vard\u0131r. Bu de\u011fi\u015fkenler genelde g\xf6z ard\u0131 edilir. \xd6rne\u011fin `a, ")," , b = (10, 20,30)` olursa a de\u011feri 10 ve b de\u011feri 30 olacakt\u0131r. Alt \xe7izgiden dolay\u0131 20 de\u011feri atlanacakt\u0131r. For d\xf6ng\xfcs\xfcnde de e\u011fer for indeksine ba\u011fl\u0131 bir i\u015flem yoksa kullan\u0131labilir.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"a = 5\nb = 0\nfor i in range(a):\n    b+=i # Burada i ile i\u015fimiz var\n\n# Peki i laz\u0131m olmazsa\nfor i in range(a):\n    b+=1 # Burada i i\xe7in herhangi bir i\u015flem yok. Sadece d\xf6ng\xfcde ilerleme yap\u0131yor.\n\nfor _ in range(a)\n    b+=1 # Bu sayede gereksiz indexlemeden kurtulduk.\n")),(0,r.kt)("p",null,"Ayr\u0131ca de\u011fi\u015fken de\u011feri i\xe7inde kullan\u0131l\u0131rsa da Python g\xf6rmezden gelecektir. \xd6rne\u011fin ",(0,r.kt)("inlineCode",{parentName:"p"},"a = 900000")," ifadesi ile ",(0,r.kt)("inlineCode",{parentName:"p"},"a=900_000")," ifadesi ayn\u0131 de\u011fere sahiptir. \u0130kisi de Python taraf\u0131ndan 900.000 (dokuz y\xfcz bin) olarak alg\u0131lanacakt\u0131r. "),(0,r.kt)("h2",{id:"short-circuit"},"Short-Circuit"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"center"},"Operation"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Result"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Explanation"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"X or Y"),(0,r.kt)("td",{parentName:"tr",align:"center"},"E\u011fer X False d\xf6nerse Y ",(0,r.kt)("br",null)," E\u011fer X True ise X"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Burada ilk de\u011ferden True gelirse sistem direkt olarak onu \xe7al\u0131\u015ft\u0131r\u0131r. Di\u011fer durumda Y de\u011ferini de inceleyerek bir karar verir")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"X and Y"),(0,r.kt)("td",{parentName:"tr",align:"center"},"E\u011fer X False d\xf6nerse X ",(0,r.kt)("br",null)," E\u011fer X True d\xf6nerse Y"),(0,r.kt)("td",{parentName:"tr",align:"center"},"E\u011fer X True d\xf6nerse bu durumda Y durumu \xe7al\u0131\u015facakt\u0131r, aksi taktirde X False olursa X \xe7al\u0131\u015facakt\u0131r.")))),(0,r.kt)("h2",{id:"ternary"},"Ternary"),(0,r.kt)("p",null,"Burada ilk k\u0131s\u0131m i\u015flemi, ikinci k\u0131s\u0131m if durumunu, \xfc\xe7\xfcnc\xfc k\u0131s\u0131m ise else durumunu g\xf6steriyor."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"a,b = 10,20\n\n# Geleneksel y\xf6ntem\nif a < b:\n    print(a) # 10 \xe7\u0131kt\u0131s\u0131 gelecektir\nelse:\n    print(b)\n\n# Ternary\n\nprint(a) if a < b else print(b) # 10 \xe7\u0131kt\u0131s\u0131 gelecektir\n")),(0,r.kt)("h2",{id:"listeler"},"Listeler"),(0,r.kt)("h3",{id:"list"},"List"),(0,r.kt)("p",null,"Listeler ile stringler ayn\u0131 \xe7al\u0131\u015f\u0131r. Indexleme ve slicing ayn\u0131d\u0131r. Listelerde baz\u0131 fonksiyonlar vard\u0131r. Listeler mutable'd\u0131r. Yani verileri g\xfcncellenebilir."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"len(list)"),": Listenin uzunlu\u011funu verir"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"list.append(val)"),": Listeye val de\u011ferini ekler"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"list.extend(val1, val2, val3)"),": Birde fazla de\u011feri listeye ekler"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"list.insert(index,val)"),": Listenin verilen indeksine o de\u011feri ekler"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"list.remove(val)"),": Listede ilk g\xf6r\xfc\u011f\xfc val de\u011ferini siler. De\u011fer yoksa hata verir"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"list.pop(index)"),": Listenin indexteki de\u011ferini siler. Ancak remove'dan farkl\u0131 olarak bir de\u011fi\u015fkene atanabilir. \xd6rne\u011fin")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"a=[1,2,3,4]\n\na.remove(0) # 1 de\u011feri listeden silinir. Art\u0131k yeni liste [2,3,4] olur.\n\nb = a.pop(0) # Yeni listemize g\xf6re 2 de\u011ferini listeden \xe7\u0131kar\u0131r ve bunu b de\u011ferine ekler. \n\nprint(b) # b de\u011feri 2 olarak d\xf6ner.\n\n")),(0,r.kt)("p",null,"Listelerde aliasing yap\u0131ld\u0131\u011f\u0131 zaman yeni de\u011fer de g\xfcncellenir. "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'a = 5\nb = 5\na +=1\n\n# Art\u0131k a de\u011feri 6 ve b de\u011feri 5 oldu. A ile birlikte g\xfcncellenmedi.\n\n\nlist = [1,2,3]\nl2 = list\n\nlist.append(4)\n\n""" \nl2 de art\u0131k [1,2,3,4] \u015feklinde oldu. Yani normal de\u011fi\u015fken gibi de\u011fer almad\u0131. Aksine etiket ald\u0131.\nE\u011fer yeni liste olu\u015facaksa ve list\'e ba\u011fl\u0131 olmayacaksa \u015fu \u015fekilde olur \n"""\n\nl3 = list.copy()\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"list.index(val)"),": Val de\u011ferinin ilk hangi indekste oldu\u011funu s\xf6yler."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"list.reverse()"),": Listeyi tersine \xe7evirir."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"sorted(list)"),": Listeyi varsay\u0131lan olarak k\xfc\xe7\xfckten b\xfcy\xfc\u011fe s\u0131ralar ama listeyi direkt g\xfcncellemez. Yeni de\u011fi\u015fkene atamak i\xe7in idealdir. Orijinal veriye dokunma."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"list.sort()"),": Yeni listeyi varsay\u0131lan olarak k\xfc\xe7\xfckten b\xfcy\xfc\u011fe s\u0131ralar ve bunu yeni liste olarak kaydeder. Yani art\u0131k ",(0,r.kt)("inlineCode",{parentName:"li"},"print(list)")," dedi\u011fimzde yeni s\u0131ralanm\u0131\u015f listeyi ekrana yazar.")),(0,r.kt)("p",null,"Liste elemanlar\u0131n\u0131 stringe \xe7evirmek i\xe7in ",(0,r.kt)("inlineCode",{parentName:"p"},'"pattern".join(list)')," yapabilir. \xd6rne\u011fin liste ",(0,r.kt)("inlineCode",{parentName:"p"},'list=["merhabalar", "efendim"]')," \u015feklinde ise ve biz bunu string yapacaksak ",(0,r.kt)("inlineCode",{parentName:"p"},'" ".join(list)')," yapabiliriz."),(0,r.kt)("h3",{id:"tuple"},"Tuple"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Immutable'd\u0131r. "),(0,r.kt)("li",{parentName:"ul"},"(elem1, elem2, ...) \u015feklinde gelir")),(0,r.kt)("h3",{id:"dictionary"},"Dictionary"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"key:value \u015feklinde veri tutar. S\xfcsl\xfc parantez ",(0,r.kt)("inlineCode",{parentName:"li"},"{}")," ile tan\u0131mlan\u0131r."),(0,r.kt)("li",{parentName:"ul"},"Listedeki gibi indeksleme yerine key de\u011feri ile veri bulur.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'a= [1,2,3]\nb = {"x": 1, "y": 2, "z": 3}\na[0] # 1 de\u011feri d\xf6ner\nb["x"] # 1 de\u011feri d\xf6ner\n\n')),(0,r.kt)("p",null,"\u0130\xe7 i\xe7e de gidebiliriz."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},'ogrenciler = {\n    "Ay\u015fe": {\n        "not": 80,\n        "ogrencino": 123\n    },\n    "Ali" : {\n        "not": 40,\n        "ogrencino": 124\n    },\n    "Veli" : {\n        "not": 50,\n        "ogrencino": 125\n    }\n} \n\n\nogrenciler["Ali"] # {"not": 40, "ogrencino": 124}\nogrenciler ["Ali"]["not"] # 40\n\n')),(0,r.kt)("p",null,"Listedeki gibi append ile veri eklemeyiz. Aksine direkt key-value olarak ekleyebiliriz. \xd6rne\u011fin listede mehmet diye kimse yoksa ",(0,r.kt)("inlineCode",{parentName:"p"},'notlar["Mehmet"] = 40')," \u015feklinde ekleme yapabiliriz."),(0,r.kt)("p",null,"Dictionary i\xe7inden ",(0,r.kt)("inlineCode",{parentName:"p"},"del[key]")," ile veri sileriz."),(0,r.kt)("p",null,"Dictionary i\xe7inde for d\xf6ng\xfcs\xfc indeks yerine key de\u011ferini baz olarak \xe7al\u0131\u015f\u0131r. Yani \u015fu \u015fekilde \xe7al\u0131\u015f\u0131r"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},'d = {"student_1": [90,89], "student_2": [80,83], "student_3": [72,71]}\n\nfor k in d:\n    print(k) # student_1, student_2 ... \u015feklinde \xe7\u0131kar\n\nfor k in d:\n    print(d[k]) # [90,89] [80,83] ... \u015feklinde \xe7\u0131kar\n\nfor k in d.values():\n    print(k) # sadece valueler \xe7\u0131kar\n')),(0,r.kt)("h3",{id:"set"},"Set"),(0,r.kt)("p",null,"\xd6zg\xfcn verileri tutar. Yani bir veri tekrar etmez. \u0130ndekslenemezler ve mutable formdad\u0131r. S\xfcsl\xfc parantez ",(0,r.kt)("inlineCode",{parentName:"p"},"{}")," ile olu\u015fturulur."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"a = {1,2,3,4}\n")),(0,r.kt)("p",null,"String ile set olu\u015fturulursa bo\u015fluk ve noktalama da sete dahil olur."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"s = \"Merhabalar nas\u0131ls\u0131n\u0131z\"\nprint(set(s)) # {'n', 'h', 'M', 'z', ' ', '\u0131', 'l', 'e', 'r', 'b', 's', 'a'} \xe7\u0131kt\u0131s\u0131n\u0131z verir\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"set.add(val)")," ile eleman ekler ve ",(0,r.kt)("inlineCode",{parentName:"p"},"set.remove(val)")," ile eleman sileriz. \u0130ndeksleme olmad\u0131\u011f\u0131 i\xe7in ",(0,r.kt)("inlineCode",{parentName:"p"},"set[index]")," bize hata verir."),(0,r.kt)("p",null,"\u0130ki set aras\u0131ndaki fark\u0131 - operat\xf6r\xfc veya difference ile kontrol edebiliriz."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"s1=set([1,2,3])\ns2=set([3,4,5])\nprint(s1-s2) # {1,2,4,5}\nprint(s1.difference(s2)) # {1,2}\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"symmetric_difference"),", iki k\xfcmede ortak olmayan elemanlar\u0131n birle\u015fimini verir. "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"s1=set([1,2,3])\ns2=set([3,4,5])\nprint(s2.symmetric_difference(s1)) # {1,2,4,5}\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"intersection")," ile kesi\u015fen eleman bulunur"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"s1=set([1,2,3])\ns2=set([3,4,5])\nprint(s2.intersection(s1)) # {3}\n\n# Bunu & operat\xf6r\xfc ile de yapabiliriz veya fark\u0131n fark\u0131 da olabilir\n\nprint(s2 & s1) # {3}\nprint(s1 - (s1-s2)) # {3}\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"union")," ile veriler birle\u015ftirilebilir"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"s1=set([1,2,3])\ns2=set([3,4,5])\ns1.union(s2) # {1,2,3,4,5}\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"s1.isdisjoint(s2)")," ile kesi\u015fimin bo\u015f olup olmad\u0131\u011f\u0131 kontrol edilir"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"s2.issubset(s1)")," ile s2'nin s1'in alt k\xfcmesi olup olmad\u0131\u011f\u0131na bak\u0131l\u0131r. Tam tersi i\xe7inse ",(0,r.kt)("inlineCode",{parentName:"li"},"s2.issuperset(s1)")," yap\u0131l\u0131r.")),(0,r.kt)("h3",{id:"list-comprehension"},"List Comprehension"),(0,r.kt)("p",null,"Listeden liste olu\u015fturman\u0131n basit bir yoludur. "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},'a = [1,2,3]\nb = []\nfor i in a:\n    b.append(i**2)\n\n# Bunu k\u0131saltabiliriz\n\nb = [i*i for i in a]\n\n# Listeden sadece tekleri alacaksak \n\nb = [i for i in a if i % 2 != 0]\n\n\nc = [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n\n# Tekli say\u0131lar\u0131 -1 yapmak istiyorsak \n\nd = [e if e % 2 == 0 else -1 for e in c]\n\n# Yeni listedeki -1\'leri kald\u0131rmak istiyorsak \n\nf = [e if e % 2 == 0 else -1 for e in c if e % 2 == 0]\n\n# \u0130\xe7 i\xe7e d\xf6ng\xfc de yapabiliriz \n\nm = [[j for j in range(7)] for i in range(5)]\n\n"""\n[[0, 1, 2, 3, 4, 5, 6],\n [0, 1, 2, 3, 4, 5, 6],\n [0, 1, 2, 3, 4, 5, 6],\n [0, 1, 2, 3, 4, 5, 6],\n [0, 1, 2, 3, 4, 5, 6]] \xe7\u0131kt\u0131s\u0131 gelir\n"""\n')),(0,r.kt)("h3",{id:"variable-unpacking"},"Variable Unpacking"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"a,b,c = 1,2,3")," i\xe7in sorun yok ancak dizi i\xe7inden \xe7ekerken bu biraz de\u011fi\u015febilir.\n",(0,r.kt)("inlineCode",{parentName:"p"},"x,y,*z = [1,2,3,4]")," bu durumda x = 1 y = 2 ve z = ","[3,4]"," de\u011ferini al\u0131r."),(0,r.kt)("h3",{id:"enumerate"},"Enumerate"),(0,r.kt)("p",null,"Enumerate ile for d\xf6ng\xfcs\xfcnde direkt value yerine key value d\xf6ner. \xd6rne\u011fin "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},'a = ["selam", "merhaba", "adios", "amigo"]\n\nfor i in enumerate(a):\n  print(i)\n"""\n(0, \'selam\')\n(1, \'merhaba\')\n(2, \'adios\')\n(3, \'amigo\')  \xe7\u0131kt\u0131s\u0131 gelecektir\n"""\n\n# Mesela index value d\xf6nd\xfcreceksek \n\nfor i,e in enumerate(a):\n    print(i, "indeksinde bulunan eleman: ", e)\n')),(0,r.kt)("p",null,"enumerate i\xe7inde index 0 olmak zorunda de\u011fil. Bunu biz se\xe7ebiliriz. Bunu ",(0,r.kt)("inlineCode",{parentName:"p"},"for i in enumerate (list, start=2)")," \u015feklinde 2'den ba\u015flatabiliriz."),(0,r.kt)("h3",{id:"zip"},"Zip"),(0,r.kt)("p",null,"Zip ile iki diziyi birbirine tuple olarak yap\u0131\u015ft\u0131rabiliriz. \xd6rne\u011fin "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},'ogrenciler = ["ali", "veli", "ay\u015fe"]\nnotlar = [80,90,100]\n\nfor s,g in zip(ogrenciler, notlar):\n    print(s, g)\n"""\nali 80\nveli 90\nay\u015fe 100  \u015feklinde \xe7\u0131kt\u0131 verir\n"""\n# Dictionary olu\u015fturma\nd ={}\nfor k,v in zip(ogrenciler, notlar):\n    d[k] = v\nprint(d) # {\'ali\': 80, \'veli\': 90, \'ay\u015fe\': 100}\n')),(0,r.kt)("h2",{id:"fonksiyonlar"},"Fonksiyonlar"),(0,r.kt)("h3",{id:"predefined"},"Predefined"),(0,r.kt)("p",null,"Fonskiyonda de\u011fi\u015fkenlerden birisinin de\u011feri gelmemesi durumunda varsay\u0131lan olarak \xe7ekece\u011fi de\u011feri verebiliriz. E\u011fer predefined yoksa bunu ilk yazmam\u0131z gerekir. Yani "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"# Do\u011fru\ndef myfunc(x, y=2):\n    return x*y\n\nprint(myfunc(5)) # 10\nprint(myfunc(4,6)) # 24\n\n# Yanl\u0131\u015f\ndef myfunc(x=2, y):\n    return x*y    \n")),(0,r.kt)("h3",{id:"first-class"},"First-Class"),(0,r.kt)("p",null,"Python'da fonksiyonlara di\u011fer veri tipleri gibi m\xfcdahale edebilir veya de\u011fi\u015fkene atayabiliriz. Python i\xe7inde fonksiyonlara first class function deniyor."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"def kare(x):\n    return x**2\n\na = kare\n\na(5) # 25 \xe7\u0131kt\u0131s\u0131 verir\n")),(0,r.kt)("p",null,"Ayr\u0131ca bir fonksiyonu bir ba\u015fka fonksiyona arg\xfcman olarak g\xf6nderebiliriz"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"def kup(x,f):\n    return x*f(x)\n\ndef kare(x):\n    return x**2\n\nkup(5,kare) # 125 \xe7\u0131kt\u0131s\u0131 verir\n\n# Fonksiyonlar\u0131 dizi olarak ba\u015fka bir fonksiyona g\xf6nderebiliriz\n\ndef final(f_list, x):\n    l = []\n    for f in f_list:\n        l.append(f(x))\n\nfinal([kare,kup], 5) # [25,125] \xe7\u0131kt\u0131s\u0131 verir\n")),(0,r.kt)("p",null,"Ayr\u0131ca dilersek fonksiyonlar\u0131 dizi olarak da g\xf6nderebiliriz"))}p.isMDXComponent=!0}}]);